// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const countItems = `-- name: CountItems :one
SELECT
    COUNT(*)
FROM
    Items
`

func (q *Queries) CountItems(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countItems)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertItem = `-- name: InsertItem :one
INSERT INTO
    Items (
        id,
        name,
        icon,
        trade_limit,
        members,
        item_value,
        low_alch,
        high_alch
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, name, icon, trade_limit, members, item_value, low_alch, high_alch, created_at, updated_at
`

type InsertItemParams struct {
	ID         int64  `json:"id"`
	Name       string `json:"name"`
	Icon       string `json:"icon"`
	TradeLimit int64  `json:"trade_limit"`
	Members    bool   `json:"members"`
	ItemValue  int64  `json:"item_value"`
	LowAlch    int64  `json:"low_alch"`
	HighAlch   int64  `json:"high_alch"`
}

func (q *Queries) InsertItem(ctx context.Context, arg InsertItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, insertItem,
		arg.ID,
		arg.Name,
		arg.Icon,
		arg.TradeLimit,
		arg.Members,
		arg.ItemValue,
		arg.LowAlch,
		arg.HighAlch,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.TradeLimit,
		&i.Members,
		&i.ItemValue,
		&i.LowAlch,
		&i.HighAlch,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertOfficialPrice = `-- name: InsertOfficialPrice :one
INSERT INTO
    Official_Prices (
        item_id,
        price,
        last_price,
        volume,
        jagex_timestamp
    )
VALUES
    (?, ?, ?, ?, ?) RETURNING id, item_id, price, last_price, volume, jagex_timestamp, created_at, updated_at
`

type InsertOfficialPriceParams struct {
	ItemID         int64     `json:"item_id"`
	Price          int64     `json:"price"`
	LastPrice      int64     `json:"last_price"`
	Volume         int64     `json:"volume"`
	JagexTimestamp time.Time `json:"jagex_timestamp"`
}

func (q *Queries) InsertOfficialPrice(ctx context.Context, arg InsertOfficialPriceParams) (OfficialPrice, error) {
	row := q.db.QueryRowContext(ctx, insertOfficialPrice,
		arg.ItemID,
		arg.Price,
		arg.LastPrice,
		arg.Volume,
		arg.JagexTimestamp,
	)
	var i OfficialPrice
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.Price,
		&i.LastPrice,
		&i.Volume,
		&i.JagexTimestamp,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT
    id, name, icon, trade_limit, members, item_value, low_alch, high_alch, created_at, updated_at
FROM
    Items
ORDER BY
    name
`

func (q *Queries) ListItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Icon,
			&i.TradeLimit,
			&i.Members,
			&i.ItemValue,
			&i.LowAlch,
			&i.HighAlch,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectItem = `-- name: SelectItem :one
SELECT
    id, name, icon, trade_limit, members, item_value, low_alch, high_alch, created_at, updated_at
FROM
    Items
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) SelectItem(ctx context.Context, id int64) (Item, error) {
	row := q.db.QueryRowContext(ctx, selectItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.TradeLimit,
		&i.Members,
		&i.ItemValue,
		&i.LowAlch,
		&i.HighAlch,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectItems = `-- name: SelectItems :many
SELECT
    id, name, icon, trade_limit, members, item_value, low_alch, high_alch, created_at, updated_at
FROM
    Items
WHERE
    (
        COALESCE(?1, 0) = 0
        OR id = ?1
    )
    AND (
        COALESCE(?2, 0) = 0
        OR name LIKE CONCAT ("%", ?2, "%")
    )
    AND (
        COALESCE(?3, 0) = 0
        OR icon = ?3
    )
    AND (
        COALESCE(?4, 0) = 0
        OR trade_limit = ?4
    )
    AND (
        COALESCE(?5, -1) = -1
        OR members = ?5
    )
    AND (
        COALESCE(?6, 0) = 0
        OR item_value = ?6
    )
    AND (
        COALESCE(?7, 0) = 0
        OR low_alch = ?7
    )
    AND (
        COALESCE(?8, 0) = 0
        OR high_alch = ?8
    )
    AND (
        COALESCE(?9, 0) = 0
        OR created_at = ?9
    )
    AND (
        COALESCE(?10, 0) = 0
        OR updated_at = ?10
    )
`

type SelectItemsParams struct {
	ID         interface{} `json:"id"`
	Name       interface{} `json:"name"`
	Icon       interface{} `json:"icon"`
	TradeLimit interface{} `json:"trade_limit"`
	Members    interface{} `json:"members"`
	ItemValue  interface{} `json:"item_value"`
	LowAlch    interface{} `json:"low_alch"`
	HighAlch   interface{} `json:"high_alch"`
	CreatedAt  interface{} `json:"created_at"`
	UpdatedAt  interface{} `json:"updated_at"`
}

func (q *Queries) SelectItems(ctx context.Context, arg SelectItemsParams) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, selectItems,
		arg.ID,
		arg.Name,
		arg.Icon,
		arg.TradeLimit,
		arg.Members,
		arg.ItemValue,
		arg.LowAlch,
		arg.HighAlch,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Icon,
			&i.TradeLimit,
			&i.Members,
			&i.ItemValue,
			&i.LowAlch,
			&i.HighAlch,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :one
UPDATE Items
SET
    name = ?,
    icon = ?,
    trade_limit = ?,
    members = ?,
    item_value = ?,
    low_alch = ?,
    high_alch = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = ? RETURNING id, name, icon, trade_limit, members, item_value, low_alch, high_alch, created_at, updated_at
`

type UpdateItemParams struct {
	Name       string `json:"name"`
	Icon       string `json:"icon"`
	TradeLimit int64  `json:"trade_limit"`
	Members    bool   `json:"members"`
	ItemValue  int64  `json:"item_value"`
	LowAlch    int64  `json:"low_alch"`
	HighAlch   int64  `json:"high_alch"`
	ID         int64  `json:"id"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItem,
		arg.Name,
		arg.Icon,
		arg.TradeLimit,
		arg.Members,
		arg.ItemValue,
		arg.LowAlch,
		arg.HighAlch,
		arg.ID,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.TradeLimit,
		&i.Members,
		&i.ItemValue,
		&i.LowAlch,
		&i.HighAlch,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

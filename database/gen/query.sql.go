// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package gen

import (
	"context"
)

const countItems = `-- name: CountItems :many
SELECT
    COUNT(*)
FROM
    Items
`

func (q *Queries) CountItems(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, countItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var count int64
		if err := rows.Scan(&count); err != nil {
			return nil, err
		}
		items = append(items, count)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertItem = `-- name: InsertItem :one
INSERT INTO
    Items (
        id,
        name,
        icon,
        trade_limit,
        members,
        item_value,
        low_alch,
        high_alch
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, name, icon, trade_limit, members, item_value, low_alch, high_alch, created_at, updated_at
`

type InsertItemParams struct {
	ID         int64
	Name       string
	Icon       string
	TradeLimit int64
	Members    bool
	ItemValue  int64
	LowAlch    int64
	HighAlch   int64
}

func (q *Queries) InsertItem(ctx context.Context, arg InsertItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, insertItem,
		arg.ID,
		arg.Name,
		arg.Icon,
		arg.TradeLimit,
		arg.Members,
		arg.ItemValue,
		arg.LowAlch,
		arg.HighAlch,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.TradeLimit,
		&i.Members,
		&i.ItemValue,
		&i.LowAlch,
		&i.HighAlch,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectItem = `-- name: SelectItem :one
SELECT
    id, name, icon, trade_limit, members, item_value, low_alch, high_alch, created_at, updated_at
FROM
    Items
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) SelectItem(ctx context.Context, id int64) (Item, error) {
	row := q.db.QueryRowContext(ctx, selectItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.TradeLimit,
		&i.Members,
		&i.ItemValue,
		&i.LowAlch,
		&i.HighAlch,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectManyItems = `-- name: SelectManyItems :many
SELECT
    id, name, icon, trade_limit, members, item_value, low_alch, high_alch, created_at, updated_at
FROM
    Items
ORDER BY
    name
`

func (q *Queries) SelectManyItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, selectManyItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Icon,
			&i.TradeLimit,
			&i.Members,
			&i.ItemValue,
			&i.LowAlch,
			&i.HighAlch,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :one
UPDATE Items
SET
    name = ?,
    icon = ?,
    trade_limit = ?,
    members = ?,
    item_value = ?,
    low_alch = ?,
    high_alch = ?
WHERE
    id = ? RETURNING id, name, icon, trade_limit, members, item_value, low_alch, high_alch, created_at, updated_at
`

type UpdateItemParams struct {
	Name       string
	Icon       string
	TradeLimit int64
	Members    bool
	ItemValue  int64
	LowAlch    int64
	HighAlch   int64
	ID         int64
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItem,
		arg.Name,
		arg.Icon,
		arg.TradeLimit,
		arg.Members,
		arg.ItemValue,
		arg.LowAlch,
		arg.HighAlch,
		arg.ID,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.TradeLimit,
		&i.Members,
		&i.ItemValue,
		&i.LowAlch,
		&i.HighAlch,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
